// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

// Generated by calling `getCurrentInterface` on HumanboundToken contract
interface IHumanboundToken {
    // Events are added by hand
    event Minted(address indexed to, uint256 indexed tokenId);

    function replace(address oldExtension, address newExtension) external;

    function extend(address extension) external;

    function getFullInterface() external returns (string memory);

    function getExtensionsInterfaceIds() external returns (bytes4[] memory);

    function getExtensionsFunctionSelectors() external returns (bytes4[] memory);

    function getExtensionAddresses() external returns (address[] memory);

    function balanceOf(address owner) external returns (uint256);

    function ownerOf(uint256 tokenId) external returns (address);

    function getApproved(uint256 tokenId) external returns (address);

    function isApprovedForAll(address owner, address operator) external returns (bool);

    function _exists(uint256 tokenId) external returns (bool);

    function _isApprovedOrOwner(address spender, uint256 tokenId) external returns (bool);

    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) external;

    function transferFrom(
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 expiry,
        address from,
        address to,
        uint256 tokenId
    ) external;

    function safeTransferFrom(
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 expiry,
        address from,
        address to,
        uint256 tokenId
    ) external;

    function safeTransferFrom(
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 expiry,
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) external;

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function init() external;

    function updateOwner(address newOwner) external;

    function renounceOwnership() external;

    function getOwner() external returns (address);

    function updateOperator(address newOperator) external;

    function getOperator() external returns (address);

    function approve(address to, uint256 tokenId) external;

    function setApprovalForAll(address operator, bool approved) external;

    function _approve(address to, uint256 tokenId) external;

    function burn(uint256 tokenId, string memory burnProofURI) external;

    function burn(uint256 tokenId) external;

    function _setTokenURI(uint256 tokenId, string memory _tokenURI) external;

    function _setBaseURI(string memory _tokenURI) external;

    function setTokenURI(uint256 tokenId, string memory _tokenURI) external;

    function setBaseURI(string memory _tokenURI) external;

    function name() external returns (string memory);

    function symbol() external returns (string memory);

    function tokenURI(uint256 tokenId) external returns (string memory);

    function baseURI() external returns (string memory);

    function contractURI() external returns (string memory);

    function setContractURI(string memory uri) external;

    function depositFunds() external;

    function withdrawFunds(uint256 amount) external;

    function refundExecution(uint256 amount) external;

    function setVerifier(address verifier) external;

    function getVerifier() external returns (address);

    function retract(address extension) external;

    function mint(
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 expiry,
        address to,
        uint256 tokenId
    ) external;
}
